{"version":3,"sources":["TopPage.js","ChoroplethMap.js","App.js","index.js"],"names":["Tops","className","class","type","ChoroplethMap","features","datas","Jsondata","now","useState","setEra","Weight","setWeight","projection","d3","scale","center","path","calcR","domain","feature","properties","value","range","weight","isNaN","Number","getColor","data","index","年月日","indexOf","year","slice","circleStyle","stroke","strokeWidth","opacity","width","height","map","i","key","d","fill","x","経度","緯度","y","console","log","length","cx","cy","r","style","EraBox","props","onChange","event","target","WeightBox","Circle","transform","fontSize","textAnchor","ChoroplethMapPage","setFeatures","useEffect","a","fetch","process","res","json","topojson","objects","japan","TabLink","to","children","exact","match","color","App","component","TopPage","render","document","querySelector"],"mappings":"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","file":"static/js/main.15ceb64e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nconst Tops = () => {\r\n  return (\r\n    <body>\r\n      <div>\r\n        <div className=\"container\">\r\n          <article class=\"message is-dark\">\r\n            <section className=\"section\">\r\n              <div class=\"message-header\">\r\n                <p>隕石ページの描画</p>\r\n              </div>\r\n              <div class=\"message-body\">\r\n                過去861年から現在に至るまでの日本に落ちた隕石の位置を描画している.隕石一つ一つのデータがjsonファイルに格納されており,内訳は\r\n                <strong>\r\n                  名前,落下場所,年月日,種類,総重量 (kg),個数,緯度,経度\r\n                </strong>\r\n                である.その中で使用するデータは\r\n                <div class=\"content\">\r\n                  <ol type=\"1\">\r\n                    <li>年</li>\r\n                    <li>総重量</li>\r\n                    <li>緯度</li>\r\n                    <li>経度</li>\r\n                  </ol>\r\n                </div>\r\n                の四つである.それぞれどのように反映させているかというと,年のデータでまとまった年代ごとの色分けを行う.緯度,経度の数値を日本地図上に反映し,隕石が落ちた場所を円の中心とするようにする.日本地図がすでに実際の緯度経度が反映されて描かれているので位置は正確に描画される.そして円の大きさを総重量の値によって決める.\r\n              </div>\r\n            </section>\r\n          </article>\r\n\r\n          <article class=\"message is-link\">\r\n            <section className=\"section\">\r\n              <div class=\"message-header\">\r\n                <p>可視化の目的</p>\r\n              </div>\r\n              <div class=\"message-body\">\r\n                この可視化は日本のどこに,いつ,どれくらいの規模の隕石が落ちたかを明確に視認することができる.上記の三条件を見やすく表現するには,今回のような日本地図上での円の描画が一番最適だと判断した。事実上記の三条件がこの図ならば明確に把握できる.この図を見ることによって,例えるならば本州には満遍なく隕石が落ちているのに対し,北海道はその面積に対し1つしか落ちていないことや,2000年に入ってからまだ3つしか隕石が落ちていないなどの情報がパッと見で読み取ることができる.\r\n              </div>\r\n            </section>\r\n          </article>\r\n        </div>\r\n      </div>\r\n    </body>\r\n  );\r\n};\r\n\r\nexport default Tops;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport * as topojson from \"topojson\";\r\nimport Jsondata from \"./output.json\";\r\n\r\nconst ChoroplethMap = ({ features }) => {\r\n  const width = 1060;\r\n  const height = 800;\r\n  const standardScale = 2000;\r\n  const datas = Jsondata;\r\n  let now = [\"10\", \"20\", \"25\", \"15\", \"0\"];\r\n  const [Era, setEra] = useState(); //年代\r\n  const [Weight, setWeight] = useState(4); //年代\r\n  const projection = d3\r\n    .geoMercator()\r\n    .scale(standardScale)\r\n    .center([139.69167, 42.68944]);\r\n  const path = d3.geoPath().projection(projection);\r\n\r\n  const color = d3\r\n    .scaleLinear()\r\n    .domain(d3.extent(features, (feature) => feature.properties.value))\r\n\r\n    .range([\"#ccc\", \"#f00\"]);\r\n  const calcR = (weight) => {\r\n    if (isNaN(Number(weight))) {\r\n      return \"15\";\r\n    }\r\n    if (weight <= 0.5) {\r\n      return \"10\";\r\n    } else if (weight <= 1) {\r\n      return \"20\";\r\n    }\r\n    return \"25\";\r\n  };\r\n\r\n  const getColor = (data) => {\r\n    let index = data.年月日.indexOf(\"/\");\r\n    let year = Number(data.年月日.slice(0, index));\r\n\r\n    if (year > 2000) {\r\n      return \"red\";\r\n    } else if (year >= 1900) {\r\n      return \"#ffff00\";\r\n    } else if (year >= 1800) {\r\n      return \"#00ff00\";\r\n    } else {\r\n      return \"#00ffff\";\r\n    }\r\n  };\r\n\r\n  const circleStyle = {\r\n    stroke: \"black\",\r\n    strokeWidth: \"0.5px\",\r\n    opacity: \"0.8\",\r\n  };\r\n  const stroke = {\r\n    stroke: \"black\",\r\n    strokeWidth: \"0.5px\",\r\n  };\r\n\r\n  return (\r\n    <body>\r\n      <div className=\"container\">\r\n        <div className=\"columns\">\r\n          <div className=\"column  is-one-fifth\">\r\n            <section className=\"section\">\r\n              <Circle />\r\n              <EraBox setEra={(Era, setEra)} />\r\n              <WeightBox setWeight={(Weight, setWeight)} />\r\n            </section>\r\n          </div>\r\n          <div className=\"column\">\r\n            <svg width={width} height={height}>\r\n              <g>\r\n                {features.map((feature, i) => (\r\n                  <path\r\n                    key={i}\r\n                    d={path(feature)}\r\n                    fill=\"#008000\"\r\n                    stroke=\"white\"\r\n                  />\r\n                ))}\r\n\r\n                {datas.map((data, i) => {\r\n                  const x = projection([data.経度, data.緯度])[0];\r\n                  const y = projection([data.経度, data.緯度])[1];\r\n                  console.log(datas.length);\r\n                  if (now[Weight] === \"0\") {\r\n                    return (\r\n                      <circle\r\n                        cx={x}\r\n                        cy={y}\r\n                        r={calcR(data[\"総重量 (kg)\"])}\r\n                        fill={getColor(data)}\r\n                        style={circleStyle}\r\n                      />\r\n                    );\r\n                  }\r\n                  if (now[Weight] === calcR(data[\"総重量 (kg)\"])) {\r\n                    return (\r\n                      <circle\r\n                        cx={x}\r\n                        cy={y}\r\n                        r={calcR(data[\"総重量 (kg)\"])}\r\n                        fill={getColor(data)}\r\n                        style={circleStyle}\r\n                      />\r\n                    );\r\n                  }\r\n                })}\r\n                {datas.map((data) => {\r\n                  const x = projection([data.経度, data.緯度])[0];\r\n                  const y = projection([data.経度, data.緯度])[1];\r\n                  return <circle cx={x} cy={y} r=\"0.5\" fill=\"black\" />;\r\n                })}\r\n              </g>\r\n            </svg>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </body>\r\n  );\r\n};\r\n\r\nconst EraBox = (props) => {\r\n  console.log(props);\r\n  const change = (event) => {\r\n    console.log(event.target.value);\r\n    props.setEra(event.target.value);\r\n  };\r\n  return (\r\n    <form>\r\n      <div class=\"select\">\r\n        <select onChange={change}>\r\n          <option value=\"5\"></option>\r\n          <option value=\"1\"></option>\r\n          <option value=\"2\"></option>\r\n          <option value=\"3\"></option>\r\n          <option value=\"4\"></option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst WeightBox = (props) => {\r\n  const change = (event) => {\r\n    console.log(props);\r\n    console.log(event.target.value);\r\n    props.setWeight(event.target.value);\r\n  };\r\n  return (\r\n    <form>\r\n      <div class=\"select\">\r\n        <select onChange={change}>\r\n          <option value=\"4\">総重量の選択</option>\r\n          <option value=\"0\">~0.5Kg</option>\r\n          <option value=\"1\">0.5kg~1.0kg</option>\r\n          <option value=\"2\">1kg~</option>\r\n          <option value=\"3\">???</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst Circle = () => {\r\n  const width = 800;\r\n  const height = 200;\r\n  return (\r\n    <svg width={width} height={height}>\r\n      <g transform=\"translate(0, 0)\">\r\n        <circle cx=\"70\" cy=\"80\" r=\"10\" fill=\"#00FFFF\" opacity=\"0.8\" />\r\n        <text x=\"120\" y=\"85\" fontSize=\"20\" textAnchor=\"middle\">\r\n          :~1800\r\n        </text>\r\n        <circle cx=\"180\" cy=\"80\" r=\"10\" fill=\"#00FF00\" opacity=\"0.8\" />\r\n        <text x=\"250\" y=\"85\" fontSize=\"20\" textAnchor=\"middle\">\r\n          :1800~1900\r\n        </text>\r\n        <circle cx=\"330\" cy=\"80\" r=\"10\" fill=\"#FFFF00\" opacity=\"0.8\" />\r\n        <text x=\"400\" y=\"85\" fontSize=\"20\" textAnchor=\"middle\">\r\n          :1900~2000\r\n        </text>\r\n        <circle cx=\"480\" cy=\"80\" r=\"10\" fill=\"red\" opacity=\"0.8\" />\r\n        <text x=\"530\" y=\"85\" fontSize=\"20\" textAnchor=\"middle\">\r\n          :2000~\r\n        </text>\r\n      </g>\r\n      <g transform=\"translate(0, 50)\">\r\n        <circle cx=\"70\" cy=\"80\" r=\"10\" opacity=\"0.8\" />\r\n        <text x=\"120\" y=\"85\" fontSize=\"20\" textAnchor=\"middle\">\r\n          :~0.5Kg\r\n        </text>\r\n        <circle cx=\"180\" cy=\"80\" r=\"20\" opacity=\"0.8\" />\r\n        <text x=\"250\" y=\"85\" fontSize=\"20\" textAnchor=\"middle\">\r\n          :0.5Kg~ 1Kg\r\n        </text>\r\n        <circle cx=\"350\" cy=\"80\" r=\"25\" opacity=\"0.8\" />\r\n        <text x=\"420\" y=\"85\" fontSize=\"20\" textAnchor=\"middle\">\r\n          :1Kg~\r\n        </text>\r\n        <circle cx=\"480\" cy=\"80\" r=\"15\" opacity=\"0.8\" />\r\n        <text x=\"520\" y=\"85\" fontSize=\"20\" textAnchor=\"middle\">\r\n          :　???\r\n        </text>\r\n      </g>\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport const ChoroplethMapPage = () => {\r\n  const [features, setFeatures] = useState(null);\r\n  useEffect(() => {\r\n    (async () => {\r\n      const res = await fetch(`${process.env.PUBLIC_URL}/data/japan.json`);\r\n      const data = await res.json();\r\n      const { features } = topojson.feature(data, data.objects.japan);\r\n      setFeatures(features);\r\n    })();\r\n  }, []);\r\n\r\n  if (features == null) {\r\n    return <p>loading</p>;\r\n  }\r\n  return <ChoroplethMap features={features} />;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\n// import * as d3 from \"d3\";\r\n// import * as topojson from \"topojson\";\r\nimport TopPage from \"./TopPage\";\r\nimport { ChoroplethMapPage } from \"./ChoroplethMap\";\r\n\r\nconst TabLink = ({ to, children, exact }) => (\r\n  <Route\r\n    path={to}\r\n    exact={exact}\r\n    children={({ match }) => {\r\n      return (\r\n        <li className={match ? \"is-active\" : \"\"}>\r\n          <Link to={to} style={{ color: match ? \"rgb(32,88,90)\" : \"white\" }}>\r\n            {children}\r\n          </Link>\r\n        </li>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <body>\r\n        <section className=\"hero is-primary\">\r\n          <div className=\"hero-body\">\r\n            <h1 className=\"title\">日本に落ちた隕石は一体...</h1>\r\n          </div>\r\n\r\n          <div className=\"hero-foot\">\r\n            <nav className=\"tabs is- is-fullwidth\">\r\n              <div className=\"container\">\r\n                <ul>\r\n                  <TabLink to=\"/\" exact>\r\n                    TOP\r\n                  </TabLink>\r\n                  <TabLink to=\"/ChoroplethMap\">MAP</TabLink>\r\n                </ul>\r\n              </div>\r\n            </nav>\r\n          </div>\r\n        </section>\r\n\r\n        <div>\r\n          <Route exact path=\"/\" component={TopPage} />\r\n          <Route path=\"/ChoroplethMap\" component={ChoroplethMapPage} />\r\n        </div>\r\n      </body>\r\n    </Router>\r\n  );\r\n};\r\n\r\nconst Aa = () => {\r\n  return (\r\n    <div>\r\n      <section class=\"section\">\r\n        <div class=\"container\">\r\n          <h1 class=\"title\">Section</h1>\r\n          <h2 class=\"subtitle\">\r\n            A simple container to divide your page into{\" \"}\r\n            <strong>sections</strong>, like the one you're currently reading\r\n          </h2>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\nconst Footer = () => {\r\n  return (\r\n    <footer class=\"footer\">\r\n      <div class=\"content has-text-centered\">\r\n        <p>\r\n          <strong>Bulma</strong> by{\" \"}\r\n          <a href=\"https://jgthms.com\">Jeremy Thomas</a>. The source code is\r\n          licensed\r\n          <a href=\"http://opensource.org/licenses/mit-license.php\">MIT</a>. The\r\n          website content is licensed{\" \"}\r\n          <a href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\r\n            CC BY NC SA 4.0\r\n          </a>\r\n          .\r\n        </p>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\n\r\n// import ReactDOM from \"react-dom\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"bulma/css/bulma.css\";\r\n\r\nrender(<App />, document.querySelector(\"#content\"));\r\n"],"sourceRoot":""}